<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on 神秘极客</title><link>https://xbc.me/tags/go/</link><description>Recent content in Go on 神秘极客</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 27 Mar 2019 03:51:23 +0000</lastBuildDate><atom:link href="https://xbc.me/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>练习 Web 爬虫</title><link>https://xbc.me/exercise-web-crawler/</link><pubDate>Wed, 27 Mar 2019 03:51:23 +0000</pubDate><guid>https://xbc.me/exercise-web-crawler/</guid><description>问题 在这个练习中，我们将会使用 Go 的并发特性来并行化一个 Web 爬虫。 修改 Crawl 函数来并行地抓取 URL，并且保证不重复。 提示：你可以用一个 map 来缓存已经获</description></item><item><title>练习 等价二叉查找树</title><link>https://xbc.me/exercise-equivalent-binary-trees/</link><pubDate>Wed, 20 Mar 2019 03:47:12 +0000</pubDate><guid>https://xbc.me/exercise-equivalent-binary-trees/</guid><description>问题 不同二叉树的叶节点上可以保存相同的值序列。例如，以下两个二叉树都保存了序列 `1，1，2，3，5，8，13`。 在大多数语言中，检查两个二叉</description></item><item><title>练习 图像</title><link>https://xbc.me/exercise-images/</link><pubDate>Wed, 13 Mar 2019 03:45:21 +0000</pubDate><guid>https://xbc.me/exercise-images/</guid><description>问题 还记得之前编写的图片生成器吗？我们再来编写另外一个，不过这次它将会返回一个 image.Image 的实现而非一个数据切片。 定义你自己的 Image 类型，实现必要的方法并</description></item><item><title>练习 rot13Reader</title><link>https://xbc.me/exercise-rot-reader/</link><pubDate>Wed, 06 Mar 2019 03:43:22 +0000</pubDate><guid>https://xbc.me/exercise-rot-reader/</guid><description>问题 有种常见的模式是一个 io.Reader 包装另一个 io.Reader，然后通过某种方式修改其数据流。 例如，gzip.NewReader 函数接受一个 io.R</description></item><item><title>练习 Reader</title><link>https://xbc.me/exercise-reader/</link><pubDate>Thu, 28 Feb 2019 03:41:02 +0000</pubDate><guid>https://xbc.me/exercise-reader/</guid><description>问题 实现一个 Reader 类型，它产生一个 ASCII 字符 ‘A’ 的无限流。 背景知识 了解Go语言的接口实现方式。 Go读取流的方式 实现思路 定义MyReader结构体 为</description></item><item><title>练习 错误</title><link>https://xbc.me/exercise-errors/</link><pubDate>Thu, 21 Feb 2019 03:39:29 +0000</pubDate><guid>https://xbc.me/exercise-errors/</guid><description>问题 从之前的练习中复制 Sqrt 函数，修改它使其返回 error 值。 Sqrt 接受到一个负数时，应当返回一个非 nil 的错误值。复数同样也不被支持。 创建一个新的类型 type ErrNegativeSqrt float64 并</description></item><item><title>练习 Stringer</title><link>https://xbc.me/exercise-stringer/</link><pubDate>Thu, 14 Feb 2019 03:37:43 +0000</pubDate><guid>https://xbc.me/exercise-stringer/</guid><description>问题 通过让 IPAddr 类型实现 fmt.Stringer 来打印点号分隔的地址。 例如，IPAddr{1, 2, 3, 4} 应当打印为 “1.2.3.4”。 背景知识 类型的定义 实现类型的自定义函</description></item><item><title>练习 斐波纳契闭包</title><link>https://xbc.me/exercise-fibonacci-closure/</link><pubDate>Thu, 07 Feb 2019 03:35:28 +0000</pubDate><guid>https://xbc.me/exercise-fibonacci-closure/</guid><description>练习 斐波纳契闭包 问题 让我们用函数做些好玩的事情。 实现一个 fibonacci 函数，它返回一个函数（闭包），该闭包返回一个斐波纳契数列 `(0, 1, 1, 2, 3, 5, ...)`。 背</description></item><item><title>练习 映射</title><link>https://xbc.me/exercise-maps/</link><pubDate>Mon, 28 Jan 2019 03:30:26 +0000</pubDate><guid>https://xbc.me/exercise-maps/</guid><description>问题 实现 WordCount。它应当返回一个映射，其中包含字符串 s 中每个“单词”的个数。函数 wc.Test 会对此函数执行一系列测试用例，并输出成功还是失败</description></item><item><title>作为PHP程序员，我是这样学习Go语言的</title><link>https://xbc.me/php-vs-go/</link><pubDate>Fri, 25 Jan 2019 15:57:55 +0000</pubDate><guid>https://xbc.me/php-vs-go/</guid><description>为什么你应该学习Go语言呢？ 作为多年的PHP开发工程师，你是不是总认为自己在堆砌业务代码？ 一直以来，都是感觉无法提升自身的技术能力？ 想要有所</description></item><item><title>练习 切片</title><link>https://xbc.me/exercise-slices/</link><pubDate>Mon, 21 Jan 2019 03:27:30 +0000</pubDate><guid>https://xbc.me/exercise-slices/</guid><description>练习 切片 问题 实现 Pic。它应当返回一个长度为 dy 的切片，其中每个元素是一个长度为 dx，元素类型为 uint8 的切片。当你运行此程序时，它会将每个整数解释</description></item><item><title>练习 循环与函数</title><link>https://xbc.me/exercise-loops-and-functions/</link><pubDate>Mon, 14 Jan 2019 03:25:36 +0000</pubDate><guid>https://xbc.me/exercise-loops-and-functions/</guid><description>练习 循环与函数 问题 为了练习函数与循环，我们来实现一个平方根函数：用牛顿法实现平方根函数。 计算机通常使用循环来计算 x 的平方根。从某个猜测的值 z</description></item><item><title>并发-学习Go语言</title><link>https://xbc.me/learn-go-goroutine/</link><pubDate>Mon, 07 Jan 2019 03:00:26 +0000</pubDate><guid>https://xbc.me/learn-go-goroutine/</guid><description>阅读笔记 goroutines.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func say(s string) { for i := 0; i &amp;lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(&amp;quot;world&amp;quot;) say(&amp;quot;hello&amp;quot;) } 笔记 Go 程（goroutine）是由 Go 运行时管理的轻量级线程。 go f(x,</description></item><item><title>接口-学习Go语言</title><link>https://xbc.me/learn-go-interface/</link><pubDate>Fri, 28 Dec 2018 03:00:50 +0000</pubDate><guid>https://xbc.me/learn-go-interface/</guid><description>阅读笔记 interfaces.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) type Abser interface { Abs() float64 } func main() { var a Abser f := MyFloat(-math.Sqrt2) v := Vertex{3, 4} a = f // a MyFloat 实现了 Abser a = &amp;amp;v // a *Vertex 实现了 Abser // 下面一行，v 是一个 Vertex（而</description></item><item><title>方法-学习Go语言</title><link>https://xbc.me/learn-go-method/</link><pubDate>Fri, 21 Dec 2018 03:00:30 +0000</pubDate><guid>https://xbc.me/learn-go-method/</guid><description>阅读笔记 methods.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) type Vertex struct { X, Y float64 } func (v Vertex) Abs() float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) } func main() { v := Vertex{3, 4} fmt.Println(v.Abs()) } 笔记 Go 没有类。不过你可以为结构体类型定义方法。 方法就是一类带</description></item><item><title>映射-学习Go语言</title><link>https://xbc.me/learn-go-mapping/</link><pubDate>Fri, 14 Dec 2018 03:04:50 +0000</pubDate><guid>https://xbc.me/learn-go-mapping/</guid><description>阅读笔记 maps.go package main import &amp;quot;fmt&amp;quot; type Vertex struct { Lat, Long float64 } var m map[string]Vertex func main() { m = make(map[string]Vertex) m[&amp;quot;Bell Labs&amp;quot;] = Vertex{ 40.68433, -74.39967, } fmt.Println(m[&amp;quot;Bell Labs&amp;quot;]) } 笔记 make 函数会返回给定类型的映射，并将其初始化备用。 m就是映射了，将k</description></item><item><title>切片-学习Go语言</title><link>https://xbc.me/learn-go-slice/</link><pubDate>Fri, 07 Dec 2018 03:52:53 +0000</pubDate><guid>https://xbc.me/learn-go-slice/</guid><description>阅读笔记 slices.go package main import &amp;quot;fmt&amp;quot; func main() { primes := [6]int{2, 3, 5, 7, 11, 13} var s []int = primes[1:4] fmt.Println(s) } 笔记 切片的内部实现，类似一个链表+头尾指针。 数组的切片范围为low&amp;lt;= x &amp;lt; high slices-pointers.go package</description></item><item><title>结构体-学习Go语言</title><link>https://xbc.me/learn-go-structrue/</link><pubDate>Tue, 27 Nov 2018 03:39:35 +0000</pubDate><guid>https://xbc.me/learn-go-structrue/</guid><description>阅读笔记 pointers.go package main import &amp;quot;fmt&amp;quot; func main() { i, j := 42, 2701 p := &amp;amp;i // point to i fmt.Println(*p) // read i through the pointer *p = 21 // set i through the pointer fmt.Println(i) // see the new value of i p = &amp;amp;j // point to j *p = *p / 37 // divide j through the pointer fmt.Println(j) // see the</description></item><item><title>控制流程-学习Go语言</title><link>https://xbc.me/learn-go-flow/</link><pubDate>Tue, 20 Nov 2018 03:27:17 +0000</pubDate><guid>https://xbc.me/learn-go-flow/</guid><description>阅读笔记 if-with-a-short-statement.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) func pow(x, n, lim float64) float64 { if v := math.Pow(x, n); v &amp;lt; lim { return v } return lim } func main() { fmt.Println( pow(3, 2, 10), pow(3, 3, 20), ) } 笔记 同 for 一样， if 语句可以在条件表达式前执行一个简</description></item><item><title>函数值-学习Go语言</title><link>https://xbc.me/learn-go-function/</link><pubDate>Tue, 13 Nov 2018 03:16:15 +0000</pubDate><guid>https://xbc.me/learn-go-function/</guid><description>阅读笔记 functions-values.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) func compute(fn func(float64, float64) float64) float64 { return fn(3, 4) } func main() { hypot := func(x, y float64) float64 { return math.Sqrt(x*x + y*y) } fmt.Println(hypot(5, 12)) fmt.Println(compute(hypot)) fmt.Println(compute(math.Pow)) } 笔记 函数也是值。它们可以像其它值一样传递。 函数值可以用</description></item><item><title>搭建Docker开发环境-学习Go语言</title><link>https://xbc.me/leanr-go-docker/</link><pubDate>Tue, 21 Aug 2018 03:00:28 +0000</pubDate><guid>https://xbc.me/leanr-go-docker/</guid><description>前言 学习Go语言之前，尝试搭建基于Docker的开发环境。 基础环境 根据之前的经验，实现一个Docker的虚拟机环境。 可以在Ubuntu 18.</description></item><item><title>Gin和grpc搭建-学习Go语言</title><link>https://xbc.me/learn-go-gin/</link><pubDate>Tue, 14 Aug 2018 03:00:54 +0000</pubDate><guid>https://xbc.me/learn-go-gin/</guid><description>安装grpc 如果你遇到这样的错误 package google.golang.org/grpc: unrecognized import path &amp;quot;google.golang.org/grpc&amp;quot;(https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout) 解决方案，采用最新github的地址。 git clone https://github.com/grpc/grpc-go.git $GOPATH/src/google.golang.org/grpc git clone https://github.com/golang/net.git $GOPATH/src/golang.org/x/net git clone https://github.com/golang/text.git $GOPATH/src/golang.org/x/text go get -u github.com/golang/protobuf/{proto,protoc-gen-go} git clone https://github.com/google/go-genproto.git $GOPATH/src/google.golang.org/genproto cd</description></item><item><title>单元测试-学习Go语言</title><link>https://xbc.me/learn-go-unitest/</link><pubDate>Tue, 07 Aug 2018 03:00:07 +0000</pubDate><guid>https://xbc.me/learn-go-unitest/</guid><description>实现 采用自身的testing包实现。 踩坑 单元测试和源文件必要放在同一个目录下，才可以正常执行。 Go PHPUnit *_test文件和源文件一起 必须 任意 断言 第</description></item><item><title>基础-学习Go语言</title><link>https://xbc.me/learn-go-basic/</link><pubDate>Sat, 28 Jul 2018 03:00:37 +0000</pubDate><guid>https://xbc.me/learn-go-basic/</guid><description>包 每个 Go 程序都是由包构成的。 程序从 main 包开始运行。 本程序通过导入路径 “fmt” 和 “math/rand” 来使用这两个包。 按照约定，包名与导入路径</description></item></channel></rss>